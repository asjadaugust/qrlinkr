services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-qrlinkr}
      POSTGRES_USER: ${POSTGRES_USER:-qrlinkr_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - qrlinkr-net
    deploy:
      resources:
        limits:
          memory: 512M

  # Backend API Service (Fastify)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        NODE_ENV: production
    restart: always
    depends_on:
      - postgres
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-qrlinkr_user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-qrlinkr}
      - PORT=3001
      - HOST=0.0.0.0
    networks:
      - qrlinkr-net
    deploy:
      resources:
        limits:
          memory: 512M

  # Frontend Web Application (Next.js)
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:3001}
        NODE_ENV: production
    restart: always
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
    ports:
      - '80:3000'
    networks:
      - qrlinkr-net
    deploy:
      resources:
        limits:
          memory: 1G

  # Nginx Reverse Proxy (optional)
  # Uncomment if you want to use Nginx for SSL termination and routing
  # nginx:
  #   image: nginx:alpine
  #   restart: always
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #   volumes:
  #     - ./nginx/conf:/etc/nginx/conf.d
  #     - ./nginx/ssl:/etc/nginx/ssl
  #     - ./nginx/www:/var/www
  #   networks:
  #     - qrlinkr-net
  #   depends_on:
  #     - frontend
  #     - backend

volumes:
  postgres_data:
    driver: local

networks:
  qrlinkr-net:
    driver: bridge
