services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    container_name: qrlinkr-db-prod
    restart: unless-stopped
    networks:
      - qrlinkr-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API Service (Fastify) - Pull from GHCR
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/qrlinkr/backend:latest
    container_name: qrlinkr-backend-prod
    restart: unless-stopped
    networks:
      - qrlinkr-network
    ports:
      - '3001:3001'
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PORT=3001
      - NODE_ENV=production
      - HOST=0.0.0.0
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend Web Application (Next.js) - Pull from GHCR
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/qrlinkr/frontend:latest
    container_name: qrlinkr-frontend-prod
    restart: unless-stopped
    networks:
      - qrlinkr-network
    ports:
      - '3000:3000'
    environment:
      - NEXT_PUBLIC_API_BASE_URL=${API_BASE_URL}
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

networks:
  qrlinkr-network:
    driver: bridge

volumes:
  postgres_data:
